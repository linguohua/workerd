filegroup(name = "empty")

cc_toolchain(
    name = "linux_x86_32_toolchain",
    toolchain_identifier = "linux_x86_32-toolchain",
    toolchain_config = ":linux_x86_32_toolchain_config",
    all_files = ":empty",
    compiler_files = ":empty",
    dwp_files = ":empty",
    linker_files = ":empty",
    objcopy_files = ":empty",
    strip_files = ":empty",
    supports_param_files = 0,
)

toolchain(
    name = "cc_toolchain_for_linux_x86_32",
    toolchain = ":linux_x86_32_toolchain",
    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
    exec_compatible_with = [
        "@platforms//cpu:x86_32",
        "@platforms//os:linux",
    ],
    target_compatible_with = [
        "@platforms//cpu:x86_32",
        "@platforms//os:linux",
    ],
)

package(default_visibility = ["//visibility:public"])
load(":cc_toolchain_config.bzl", "cc_toolchain_config")

# copy from 'local_config_cc' directory
cc_toolchain_config(
    name = "linux_x86_32_toolchain_config",
    cpu = "k8",
    compiler = "clang",
    toolchain_identifier = "local",
    host_system_name = "local",
    target_system_name = "local",
    target_libc = "local",
    abi_version = "local",
    abi_libc_version = "local",
    cxx_builtin_include_directories = ["/usr/lib/llvm-15/lib/clang/15.0.7/include",
    "/usr/local/include",
    "/usr/include/x86_64-linux-gnu",
    "/usr/include",
    "/usr/lib/llvm-15/lib/clang/15.0.7/share",
    "/usr/include/c++/12",
    "/usr/include/x86_64-linux-gnu/c++/12",
    "/usr/include/c++/12/backward",
    "/usr/lib/llvm-15/include/c++/v1",
    "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk"],
    tool_paths = {"ar": "/usr/bin/ar",
        "ld": "/usr/bin/ld",
        "llvm-cov": "None",
        "llvm-profdata": "None",
        "cpp": "/usr/bin/cpp",
        "gcc": "/usr/lib/llvm-15/bin/clang",
        "dwp": "/usr/bin/dwp",
        "gcov": "/usr/bin/gcov",
        "nm": "/usr/bin/nm",
        "objcopy": "/usr/bin/objcopy",
        "objdump": "/usr/bin/objdump",
        "strip": "/usr/bin/strip"},
    compile_flags = ["-fstack-protector",
    "-Wall",
    "-Wthread-safety",
    "-Wself-assign",
    "-Wunused-but-set-parameter",
    "-Wno-free-nonheap-object",
    "-fcolor-diagnostics",
    "-fno-omit-frame-pointer"],
    opt_compile_flags = ["-g0",
    "-O2",
    "-D_FORTIFY_SOURCE=1",
    "-DNDEBUG",
    "-ffunction-sections",
    "-fdata-sections"],
    dbg_compile_flags = ["-g"],
    conly_flags = [],
    cxx_flags = ["-std=c++14"],
    link_flags = ["-fuse-ld=/usr/bin/ld.gold",
    "-B/usr/lib/llvm-15/bin",
    "-Wl,-no-as-needed",
    "-Wl,-z,relro,-z,now"],
    link_libs = ["-Wl,--push-state,-as-needed",
    "-lstdc++",
    "-Wl,--pop-state",
    "-Wl,--push-state,-as-needed",
    "-lm",
    "-Wl,--pop-state"],
    opt_link_flags = ["-Wl,--gc-sections"],
    unfiltered_compile_flags = ["-no-canonical-prefixes",
    "-Wno-builtin-macro-redefined",
    "-D__DATE__=\"redacted\"",
    "-D__TIMESTAMP__=\"redacted\"",
    "-D__TIME__=\"redacted\""],
    coverage_compile_flags = ["--coverage"],
    coverage_link_flags = ["--coverage"],
    supports_start_end_lib = True,
)
